{"meta":{"title":"Kang's","subtitle":null,"description":"Sometimes a Coder","author":"Kangshu","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2019-01-07T13:34:38.000Z","updated":"2019-01-07T13:58:30.000Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-07T13:35:20.000Z","updated":"2019-01-07T13:54:28.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"ABOUT ME","date":"2019-01-10T12:12:20.000Z","updated":"2019-01-12T07:34:52.000Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"I’m studying Zhejiang University, Hangzhou, China. I’m really absorbed in the beauty of mathematics and firmly believe that the computation capability which has been advancing every second will promote the applications of abstract math in our daily life. So I share a optimistic attitude towards the permeation of techniques related to artificial intelligence into every walk of our life. My graduation thesis is related applications of neural networks and reinforcament learning in wastewater treatment. I have learned some basic consepts and skills about coding and program design since 2017. The opening of my tech Blog is linked to my purpose of sharing my feelings,experience and summaries with other friends, and also, it is really perfect alternative of notes since I can check and present to others whereever I go. For more detials about my project expericence and academic background, please check:My Resume Do be hesitated to contact me if any questions, my e-mail:zhangks93@outlook.comand this is my github:https://github.com/zhangks93 Feel free to fork or comment."}],"posts":[{"title":"Stack,Queue and linked list","slug":"Stack-Queue-and-linked-list","date":"2019-01-06T10:59:22.000Z","updated":"2019-01-19T00:04:00.000Z","comments":true,"path":"2019/01/06/Stack-Queue-and-linked-list/","link":"","permalink":"http://yoursite.com/2019/01/06/Stack-Queue-and-linked-list/","excerpt":"StackA stack (sometimes called a “push-down stack”) is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end. This end is commonly referred to as the “top.” The end opposite the top is known as the “base.” The base of the stack is significant since items stored in the stack that are closer to the base represent those that have been in the stack the longest. The most recently added item is the one that is in position to be removed first. This ordering principle is sometimes called LIFO, last-in first-out. It provides an ordering based on length of time in the collection. Newer items are near the top, while older items are near the base.","text":"StackA stack (sometimes called a “push-down stack”) is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end. This end is commonly referred to as the “top.” The end opposite the top is known as the “base.” The base of the stack is significant since items stored in the stack that are closer to the base represent those that have been in the stack the longest. The most recently added item is the one that is in position to be removed first. This ordering principle is sometimes called LIFO, last-in first-out. It provides an ordering based on length of time in the collection. Newer items are near the top, while older items are near the base. 123456789101112def Dec_to_Bin(nums): result=[] while nums!=0: result.insert(len(result)+1,nums%2) nums=nums//2 binString = \"\" while len(result)&gt;0: binString = binString + str(result.pop()) return int(binString)print(Dec_to_Bin(99))print(Dec_to_Bin(37)) 1100011 100101 QueueA queue is an ordered collection of items where the addition of new items happens at one end, called the “rear,” and the removal of existing items occurs at the other end, commonly called the “front.” As an element enters the queue it starts at the rear and makes its way toward the front, waiting until that time when it is the next element to be removed. The most recently added item in the queue must wait at the end of the collection. The item that has been in the collection the longest is at the front. This ordering principle is sometimes called FIFO, first-in first-out. It is also known as “first-come first-served.” 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import randomclass Queue(): def __init__(self): self.list=[] def enqueue(self,name): self.list.insert(0,name) def dequeue(self): return self.list.pop() def size(self): return len(self.list) def judge(self): if len(self.list)&gt;0: return True else: return False class Task: def __init__(self,time): self.timestamp = time self.pages = random.randrange(1,21) def getStamp(self): return self.timestamp def getPages(self): return self.pages def waitTime(self, currenttime): return currenttime - self.timestamp class Printer: def __init__(self, ppm): self.pagerate = ppm self.currentTask = None self.timeRemaining = 0 def tick(self): if self.currentTask != None: self.timeRemaining = self.timeRemaining - 1 if self.timeRemaining &lt;= 0: self.currentTask = None def busy(self): if self.currentTask != None: return True else: return False def startNext(self,newtask): self.currentTask = newtask self.timeRemaining = newtask.getPages() * 60/self.pageratedef newPrintTask(): num = random.randrange(1,181) if num == 180: return True else: return Falsefor i in range(20): pagesPerMinute=7 labprinter = Printer(pagesPerMinute) printQueue = Queue() waitingtimes = [] for currentSecond in range(7200): if newPrintTask(): task = Task(currentSecond) printQueue.enqueue(task) if (not labprinter.busy()) and (printQueue.judge()): nexttask = printQueue.dequeue() waitingtimes.append( nexttask.waitTime(currentSecond)) labprinter.startNext(nexttask) labprinter.tick() averageWait=sum(waitingtimes)/len(waitingtimes) print(\"Average Wait %6.2f secs %3d tasks remaining.\"%(averageWait,printQueue.size())) Average Wait 59.57 secs 0 tasks remaining. Average Wait 65.32 secs 0 tasks remaining. Average Wait 33.77 secs 0 tasks remaining. Average Wait 45.81 secs 0 tasks remaining. Average Wait 16.58 secs 0 tasks remaining. Average Wait 46.65 secs 0 tasks remaining. Average Wait 132.59 secs 1 tasks remaining. Average Wait 36.56 secs 0 tasks remaining. Average Wait 65.07 secs 0 tasks remaining. Average Wait 66.28 secs 0 tasks remaining. Average Wait 31.38 secs 1 tasks remaining. Average Wait 71.24 secs 0 tasks remaining. Average Wait 28.50 secs 0 tasks remaining. Average Wait 29.76 secs 0 tasks remaining. Average Wait 27.44 secs 0 tasks remaining. Average Wait 16.71 secs 0 tasks remaining. Average Wait 21.87 secs 0 tasks remaining. Average Wait 36.16 secs 0 tasks remaining. Average Wait 25.22 secs 0 tasks remaining. Average Wait 69.79 secs 0 tasks remaining.","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://yoursite.com/categories/Data-Structure/"}],"tags":[{"name":"Stack; Queue; Linked List","slug":"Stack-Queue-Linked-List","permalink":"http://yoursite.com/tags/Stack-Queue-Linked-List/"}]},{"title":"Neural Networks","slug":"Networks","date":"2018-11-20T04:48:25.000Z","updated":"2019-01-18T23:06:00.000Z","comments":true,"path":"2018/11/20/Networks/","link":"","permalink":"http://yoursite.com/2018/11/20/Networks/","excerpt":"","text":"Neural networks have a large circle of acquaintance engaged in mathematics, engineering, economics and many others due to their excellent performance in function approximation, pattern recognition, associative memories, forecasting and generation of new meaningful patterns. Applications of neural networks in wastewater treatment systems require full understandings of these all. Therefore, for further comprehension of this methodology, this section provides a preliminary understanding of neural networks starting with their development and structure, and emphasizes more on their classification and technical coupling with other machine learning methods. Evolution: from artificial neuron to deep learningThe past six decades have witnessed ups and downs in the development of neural networks. The modern era of neural networks began with the pioneering work of McCulloch and Pitts (1943), who proposed a neurophysiology and mathematics based model that appeared to calculate any computable functions. The next major advance came in six years later that explicit statement of a physiological learning rule for synaptic modification was presented to support for the development of the following computational models. After that, the golden age prelude opened. Practical neuron-computers were developed one after another, the most classical of which were recognized as the perceptron and adaptive linear element respectively. With a booming in the research of neural networks, intelligent learning machines seemed to be created already. However, an analysis of the weakness of the perceptron when confronting with nonlinearly problems put an end to this overestimation. The enthusiasm faded slowly combined with declining research funds at the same time, however, the prolonged silence built the foundation of theories for the still continuing renaissance. Until the introduction of the back-propagation of error learning procedure did the research of neural networks whipped into its right track again. Recently, although originally viewed with scepticism, neural networks have undergone a renaissance in the form of deep learning ( such as Deep Feedforward Networks, Convolutional Neural Networks, Generative Adversarial Networks and AutoEncoder), as a result of the development of novel training rules, an expansion in the number of layers, the access of large-scale datasets and better hardware implementations. Although researches based on the principles of the neuron doctrine are far from being finished, neural networks in computer science, benefiting from their overwhelming self-adaptability, self-organization and self-learning, have stretched into every walk of life. Hierarchy: from node to networkBiologically, an activated neuron acts like an interchange station transferring chemical substance to the connected ones. Chemical substance converts the electric potential in neurons, and we define this neuron is activated if the electric potential exceeds a specific threshold. Similarly, the neuron in computer science is just an information-process unit derives from the biological neuron (Haykin, 1998). It consists of three basic elements:i. A bunch of weighted connections referred to as w_ij and linking two neurons i and j;ii. An accumulator calculating a weighted sum of input signals x_ij;iii. An activation function referred to as f and judging whether or not to send its activation value in turn down to other connecting ones depending on difference between the weighted sum and a threshold value. The most common activation functions are summarized in Table.2.In mathematical terms, taking the threshold value in the form of bias into consideration, the output of a neuron i can be described by the following equation:y_i=f(∑_1^m▒w_ij x_ij+bias)Neurons are the element of neural networks which combines neurons in a specific network topology. Generally, in the network, data are introduced to the input layer with further procession in the following layers and constitution of an overall response to the initial inputs in the output layer (Haykin, 1998; Kriesel, 2007). Neural networks consisting of three or more fully/partly connected layers (an input and an output layer with one or more hidden layers) of linearly/nonlinearly-activating nodes are described as multilayer perceptron (MLP), which is the most basic and frequently used form of neural networks. The information learned by neural networks is stored in connecting weights and bias, which are elementary parameters of neural networks. Naturally, the number of layers and the number of nodes per layer are meta-parameters. The learning process adjusting elementary parameters and validation process to optimize meta-parameters will be introduced in Section 3. Classification: supervised or unsupervisedBenefit from their respective topologies, different networks show distinct advantages in solving different problems. Traditionally, neural networks are classified based on the following categories : (i) topological structure involved in the information flow of networks, (ii) the degree of learning supervision, (iii) the learning algorithms. In this section, we describe several popular networks briefly in the order of learning supervision with some typical topological structure introduced in sub-classifications. Meanwhile, considering complicated issues and special requirements in wastewater treatment, hybrid frameworks, not a particular type, are added to illustrate the strong technical coupling of neural networks with other machine learning methods. Supervised LearningSupervised learning means inferring a model from labeled training data (Mohri et al., 2012). Among supervised learning, feed-forward neural networks (FFNNs) and recurrent neural networks (RNNs) are representatives of two disparate topological structures. FFNNs consist of neurons organized in layers with information flowing forward, from the input layer, through the hidden layer(s) and to the output layer. Each neuron in each layer is always completely linked to those in the neighboring layer (Fig.3). Back-propagation based FFNNs, due to their efficiency, conciseness and flexibility, are the most commonly used type (Basheer and Hajmeer, 2000). Back-propagation means error is transmitted in the opposite direction against data flow. Back-propagation algorithm was created by Paul Werbos and reorganized by Rumelhart et al (Rumelhart, 1986a; Werbos, 1974). So important it is that we must introduce back-propagation in detail in Section 3 when talking about model training. Radial basis function (RBF) networks are special cases of three-layered back-propagation based networks but always listed out separately to make comparisons with the back-propagation based networks. RBF networks employ RBFs (such as Gaussian kernel, Multiquadric and Inverse quadratic) working as activation functions in the sole hidden layer to cluster inputs of the network and implement a linear combination of RBFs in the output layer (Park and Sandberg, 1993, 1991). RBF networks are trained faster than back-propagation based ones but not as versatile (Basheer and Hajmeer, 2000). Convolutional Neural Networks are a specialized kind of deep, feed-forward networks for processing data known as grid-like topology (Goodfellow et al., 2016). The shared-weights architecture and translation invariance characteristics achieved by convolutional layer and pooling layer make them tremendously successful in practical applications involved in computer vision. Generative Adversarial Networks is a combination of twins sub-networks working together: one generates content and the other judges it. The discriminating network receives either training data or generated content from the generative network. Its discriminating ability is sent to the generating network as a feedback, which creates a form of competition making the discriminator work better at distinguishing real data from generated data and the generator learn to become less predictable to the discriminator. Different from FFNNs, RNNs make output signals fed back to neurons in the same or previous layers. The information and connection feedbacks allow the current state of RNNs to depend not only on the current inputs but also on the network state in the previous time steps. Therefore, the dynamic memory of RNNs plays an important role in solving changes related to time variations. The most common ones are Elman networks, combing hidden-layered neuron’s outputs with signals from input layer next time step as inputs of neurons in the hidden layer (Williams and Zipser, 1989). Another typical RNNs, Hopfield neural networks, are two-layered networks with an energy function serving as guarantee to converge to local minimums, which makes them efficient in solving optimization problems (Sathasivam, 2008). Long/short term memory (LSTM) networks is a kind of RNNs equipped with memory cells, each of which has three gates: input, output and forget. The input gate and the output gate determine strength of the information flow from the previous layer and to the following layer, respectively. The forget gate determines how much information in the current cell to forget. With the adjustable memory, LSTMs have been proved to be able to learn complex interrelationship from sequence problems. Unsupervised LearningUnsupervised learning means inferring a model to describe the hidden structure from unlabeled training data (Mohri et al., 2012). Networks affiliated to unsupervised learning adaptively update a certain bunch of weights related to the winning output neuron, which derives from competitions between all output-layered neurons (Basheer and Hajmeer, 2000). The most common are Self-Organizing Maps (SOMs), which are also known as Kohonen networks. In SOMs, output-layered neurons are not isolated but interconnected with the neighboring ones in the form of two or three dimensional matrix (Kalteh et al., 2008; Kohonen, 1982). It is convenient for mapping input data to a low dimensional space but the internal topological structure of high-dimensional characteristics is maintained in parallel, which provides SOMs significant advantages in clustering and data compression (Kohonen and Honkela, 2007). Adaptive resonance theory (ART) networks, another frequently-used ones, do not modify the learned information stored in the weight vectors when presented with a new pattern but enlarge memory capacity synchronously with the increase of patterns (Carpenter and Grossberg, 2003; Grossberg, 2013). AutoEncoder is a typical unsupervised learning model attached to deep learning. It is trained to copy its input to its output by learning to compress data from the input layer into a short code and then to uncompress that code into something matching the original data. This forces the AutoEncoder to engage in dimensionality reduction and learning how to ignore noise. Hybrid frameworksHybrid frameworks are not a particular kind of neural networks, but one combining traditional neural networks with other machine learning methods (e.g. fuzzy system, reinforcement learning, or GA) to dovetail their respective superiority. Most of the developments on hybrid GA and neural networks focus on the exploitation of an enhancement to the design of neural networks, especially in the determination of the network structure. GAs evolve network topologies, starting with a set of arbitrary parameters and ensure the global optimal of the network topology. Likewise, particle swarm optimization (PSO), another type of global and population-based algorithm, has the same capability in improving the design of neural networks as that of GAs. Reinforcement learning, a kind of data-free method, pursues the maximum reward of adjusted actions based on the relationship between agent and environment. Therefore, it is perfect for system control especially for a lack of training data to implement supervised learning methods. Fuzzy neural networks, due to the fuzzy knowledge base brought by fuzzy system, are accomplished in expressing the fuzzy rules that are required during system control. Apparently, hybrid frameworks have the capacity to deal with more complex issues but are recommended to be avoided if single networks perform well enough, because complicated and coupled model structure impose extra computational burden. Indeed, there are no “one-size-fit-all” neural networks, but a relatively better choice, just like a key to a lock, does exist for a given problem. SOMs work better in classification and data visualization; an optimization problem requires Hopfield networks; back-propagation and RBF based networks may be appropriate for forecasting and controlling; RNNs are perfect for time series problems. Therefore, the selection of neural network architecture foreshadows the effective handling of the problem to be resolved.","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/categories/Algorithm/"}],"tags":[{"name":"Neural Networks","slug":"Neural-Networks","permalink":"http://yoursite.com/tags/Neural-Networks/"}]},{"title":"[linux]shell Basic","slug":"linux-shell-Basic","date":"2018-11-15T05:18:23.000Z","updated":"2018-11-15T05:23:48.000Z","comments":true,"path":"2018/11/15/linux-shell-Basic/","link":"","permalink":"http://yoursite.com/2018/11/15/linux-shell-Basic/","excerpt":"","text":"View Documents1234567linux@root：cd /usr/binlinux@root：cd ./Documentslinux@root：cd ../Docunmentslinux@root：pwd","categories":[],"tags":[]},{"title":"【SQL】 MySQL Basic","slug":"MySQL-Basic","date":"2018-11-13T22:00:13.000Z","updated":"2018-11-15T05:17:34.000Z","comments":true,"path":"2018/11/14/MySQL-Basic/","link":"","permalink":"http://yoursite.com/2018/11/14/MySQL-Basic/","excerpt":"","text":"SELECT1SELECT Column_Name FROM Table_Name SELECT * FROM Table_Name SELECT DISTINCT Column_Name FROM Table_Name SELECT DISTINCT Column_Name FROM Table_Name SELECT Column_Name FROM Table_Name LIMIT Number SELECT Column_Name FROM Table_Name LIMIT Number SELECT Function(Column_Name) FROM Table_Name avg() count() first() last() max() min() sum()PrerequisiteSELECT Column_Name FROM Table_Name WHERE Condition Option Description &gt;,&lt;,&gt;=,&lt;= larger/smaller than a specific value =,!= equal or unequal to a specific value BETWEEN in a certain range LIKE search in a certain area, always combined with wildcardSortSELECT Column_Name FROM Table_Name ORDER BY Column_Name AliasSELECT Column_Name AS Alias FROM Table_Name SELECT Column_Name FROM Table_A_Name AS A JOIN Table_B_Name AS B","categories":[],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}]},{"title":"MySQL Advanced","slug":"MySQL-Advanced","date":"2018-11-13T21:58:48.000Z","updated":"2018-11-13T21:58:50.000Z","comments":true,"path":"2018/11/14/MySQL-Advanced/","link":"","permalink":"http://yoursite.com/2018/11/14/MySQL-Advanced/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Summary of five Sorting algorithms","slug":"Sorting","date":"2018-10-08T14:14:09.000Z","updated":"2019-02-15T02:51:46.000Z","comments":true,"path":"2018/10/08/Sorting/","link":"","permalink":"http://yoursite.com/2018/10/08/Sorting/","excerpt":"Bubble SortThe bubble sort makes multiple passes through a list. It compares adjacent items and exchanges those that are out of order. Each pass through the list places the next largest value in its proper place. In essence, each item “bubbles” up to the location where it belongs.","text":"Bubble SortThe bubble sort makes multiple passes through a list. It compares adjacent items and exchanges those that are out of order. Each pass through the list places the next largest value in its proper place. In essence, each item “bubbles” up to the location where it belongs. 123456789101112131415def BubbleSort(list): exchange=0 comparison=0 for i in range(len(list)-1,0,-1): for j in range(i): if list[j]&gt;list[j+1]: comparison=comparison+1 temp=list[j+1] list[j+1]=list[j] list[j]=temp exchange=exchange+1 else: comparison=comparison+1 return list,comparison,exchangeprint(BubbleSort([54,26,93,17,77,31,15,8,63,31,44,55,20])) ([8, 15, 17, 20, 26, 31, 31, 44, 54, 55, 63, 77, 93], 78, 43) Selection SortThe selection sort improves on the bubble sort by making only one exchange for every pass through the list. In order to do this, a selection sort looks for the largest value as it makes a pass and, after completing the pass, places it in the proper location. As with a bubble sort, after the first pass, the largest item is in the correct place. After the second pass, the next largest is in place. This process continues and requires n−1 passes to sort n items, since the final item must be in place after the (n−1) st pass. 1234567891011121314151617181920def SelectionSort(list): exchange=0 comparison=0 for i in range(len(list)-1,0,-1): max=list[0] index=0 for j in range(1,i+1): if list[j]&gt;max: comparison=comparison+1 max=list[j] index=j else: comparison=comparison+1 temp=list[i] list[i]=list[index] list[index]=temp exchange=exchange+1 return list,comparison,exchangeprint(SelectionSort([54,26,93,17,77,31,15,8,63,31,44,55,20])) ([8, 15, 17, 20, 26, 31, 31, 44, 54, 55, 63, 77, 93], 78, 12) Insertion SortThe insertion sort, although still O(n2), works in a slightly different way. It always maintains a sorted sublist in the lower positions of the list. Each new item is then “inserted” back into the previous sublist such that the sorted sublist is one item larger 12345678910111213141516def InsertionSort(list): exchange=0 comparison=0 for i in range(1,len(list)): value=list[i] index=i while index&gt;0 and value&lt;=list[index-1]: list[index]=list[index-1] index=index-1 comparison=comparison+1 exchange=exchange+1 list[index]=value return list,comparison,exchangeprint(InsertionSort([54,26,93,17,77,31,15,8,63,31,44,55,20])) ([8, 15, 17, 20, 26, 31, 31, 44, 54, 55, 63, 77, 93], 44, 44) Shell SortThe shell sort, sometimes called the “diminishing increment sort,” improves on the insertion sort by breaking the original list into a number of smaller sublists, each of which is sorted using an insertion sort. The unique way that these sublists are chosen is the key to the shell sort. Instead of breaking the list into sublists of contiguous items, the shell sort uses an increment i, sometimes called the gap, to create a sublist by choosing all items that are i items apart. 1234567891011121314151617181920def gapinsertionsort(nums,start,gap): for i in range(start+gap,len(nums),gap): value=nums[i] index=i while index&gt;=gap and value&lt;nums[index-gap]: nums[index]=nums[index-gap] index=index-gap nums[index]=value return nums def ShellSort(list): count=len(list)//3 while count&gt;0 : for position in range(count): list=gapinsertionsort(list,position,count) print(count,list) count=count//3 return listprint(ShellSort([54,26,93,17,77,31,15,8,63,31,44,55,20])) 4 [20, 26, 15, 8, 54, 31, 44, 17, 63, 31, 93, 55, 77] 1 [8, 15, 17, 20, 26, 31, 31, 44, 54, 55, 63, 77, 93] [8, 15, 17, 20, 26, 31, 31, 44, 54, 55, 63, 77, 93] Merge SortMerge sort is a recursive algorithm that continually splits a list in half. If the list is empty or has one item, it is sorted by definition (the base case). If the list has more than one item, we split the list and recursively invoke a merge sort on both halves. Once the two halves are sorted, the fundamental operation, called a merge, is performed. Merging is the process of taking two smaller sorted lists and combining them together into a single, sorted, new list. 123456789101112131415161718192021222324252627282930313233def MergeSort(list): if len(list)&gt;1: point=len(list)//2 left=list[:point] right=list[point:] MergeSort(left) MergeSort(right) L=0 R=0 k=0 while L&lt;len(left) and R&lt;len(right): if left[L]&lt;right[R]: list[k]=left[L] L=L+1 k=k+1 else: list[k]=right[R] R=R+1 k=k+1 while L&lt;len(left): list[k]=left[L] L=L+1 k=k+1 while R&lt;len(right): list[k]=right[R] R=R+1 k=k+1 return listprint(MergeSort([54,26,93,17,77,31,15,8,63,31,44,55,20])) [8, 15, 17, 20, 26, 31, 31, 44, 54, 55, 63, 77, 93] ReferenceProblem Solving with Algorithms and Data Structures Using Python. Bradley N. Miller, David L. Ranum. 2005","categories":[],"tags":[{"name":"Sort","slug":"Sort","permalink":"http://yoursite.com/tags/Sort/"}]},{"title":"Regression","slug":"Regression-1","date":"2018-08-20T04:50:01.000Z","updated":"2018-08-20T04:50:02.000Z","comments":true,"path":"2018/08/20/Regression-1/","link":"","permalink":"http://yoursite.com/2018/08/20/Regression-1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"How to Write a Research Proposal","slug":"How-to-Write-a-Research-Proposal","date":"2018-07-30T14:19:59.000Z","updated":"2019-01-18T22:51:14.000Z","comments":true,"path":"2018/07/30/How-to-Write-a-Research-Proposal/","link":"","permalink":"http://yoursite.com/2018/07/30/How-to-Write-a-Research-Proposal/","excerpt":"Most students and beginning researchers do not fully understand what a research proposal means, nor do they understand its importance. To put it bluntly, one’s research is only as a good as one’s proposal. An ill-conceived proposal dooms the project even if it somehow gets through the Thesis Supervisory Committee. A high quality proposal, on the other hand, not only promises success for the project, but also impresses your Thesis Committee about your potential as a researcher. A research proposal is intended to convince others that you have a worthwhile research project and that you have the competence and the work-plan to complete it. Generally, a research proposal should contain all the key elements involved in the research process and include sufficient information for the readers to evaluate the proposed study. Regardless of your research area and the methodology you choose, all research proposals must address the following questions: What you plan to accomplish, why you want to do it and how you are going to do it. The proposal should have sufficient information to convince your readers that you have an important research idea, that you have a good grasp of the relevant literature and the major issues, and that your methodology is sound. The quality of your research proposal depends not only on the quality of your proposed project, but also on the quality of your proposal writing. A good research project may run the risk of rejection simply because the proposal is poorly written. Therefore, it pays if your writing is coherent, clear and compelling. This paper focuses on proposal writing rather than on the development of research ideas.","text":"Most students and beginning researchers do not fully understand what a research proposal means, nor do they understand its importance. To put it bluntly, one’s research is only as a good as one’s proposal. An ill-conceived proposal dooms the project even if it somehow gets through the Thesis Supervisory Committee. A high quality proposal, on the other hand, not only promises success for the project, but also impresses your Thesis Committee about your potential as a researcher. A research proposal is intended to convince others that you have a worthwhile research project and that you have the competence and the work-plan to complete it. Generally, a research proposal should contain all the key elements involved in the research process and include sufficient information for the readers to evaluate the proposed study. Regardless of your research area and the methodology you choose, all research proposals must address the following questions: What you plan to accomplish, why you want to do it and how you are going to do it. The proposal should have sufficient information to convince your readers that you have an important research idea, that you have a good grasp of the relevant literature and the major issues, and that your methodology is sound. The quality of your research proposal depends not only on the quality of your proposed project, but also on the quality of your proposal writing. A good research project may run the risk of rejection simply because the proposal is poorly written. Therefore, it pays if your writing is coherent, clear and compelling. This paper focuses on proposal writing rather than on the development of research ideas. Title:It should be concise and descriptive. For example, the phrase, “An investigation of . . .” could be omitted. Often titles are stated in terms of a functional relationship, because such titles clearly indicate the independent and dependent variables. However, if possible, think of an informative but catchy title. An effective title not only pricks the reader’s interest, but also predisposes him/her favourably towards the proposal. AbstractIt is a brief summary of approximately 300 words. It should include the research question, the rationale for the study, the hypothesis (if any), the method and the main findings. Descriptions of the method may include the design, procedures, the sample and any instruments that will be used. IntroductionThe main purpose of the introduction is to provide the necessary background or context for your research problem. How to frame the research problem is perhaps the biggest problem in proposal writing. If the research problem is framed in the context of a general, rambling literature review, then the research question may appear trivial and uninteresting. However, if the same question is placed in the context of a very focused and current research area, its significance will become evident. Unfortunately, there are no hard and fast rules on how to frame your research question just as there is no prescription on how to write an interesting and informative opening paragraph. A lot depends on your creativity, your ability to think clearly and the depth of your understanding of problem areas. However, try to place your research question in the context of either a current “hot” area, or an older area that remains viable. Secondly, you need to provide a brief but appropriate historical backdrop. Thirdly, provide the contemporary context in which your proposed research question occupies the central stage. Finally, identify “key players” and refer to the most relevant and representative publications. In short, try to paint your research question in broad brushes and at the same time bring out its significance. The introduction typically begins with a general statement of the problem area, with a focus on a specific research problem, to be followed by the rational or justification for the proposed study. The introduction generally covers the following elements: State the research problem, which is often referred to as the purpose of the study. Provide the context and set the stage for your research question in such a way as to show its necessity and importance. Present the rationale of your proposed study and clearly indicate why it is worth doing. Briefly describe the major issues and sub-problems to be addressed by your research. Identify the key independent and dependent variables of your experiment. Alternatively, specify the phenomenon you want to study. State your hypothesis or theory, if any. For exploratory or phenomenological research, you may not have any hypotheses. (Please do not confuse the hypothesis with the statistical null hypothesis.) Set the delimitation or boundaries of your proposed research in order to provide a clear focus. Provide definitions of key concepts. (This is optional.) Literature ReviewSometimes the literature review is incorporated into the introduction section. However, most professors prefer a separate section, which allows a more thorough review of the literature. The literature review serves several important functions: Ensures that you are not “reinventing the wheel”. Gives credits to those who have laid the groundwork for your research. Demonstrates your knowledge of the research problem. Demonstrates your understanding of the theoretical and research issues related to your research question. Shows your ability to critically evaluate relevant literature information. Indicates your ability to integrate and synthesize the existing literature. Provides new theoretical insights or develops a new model as the conceptual framework for your research. Convinces your reader that your proposed research will make a significant and substantial contribution to the literature (i.e., resolving an important theoretical issue or filling a major gap in the literature). Most students’ literature reviews suffer from the following problems: Lacking organization and structure Lacking focus, unity and coherence Being repetitive and verbose Failing to cite influential papers Failing to keep up with recent developments Failing to critically evaluate cited papers Citing irrelevant or trivial references Depending too much on secondary sources Your scholarship and research competence will be questioned if any of the above applies to your proposal. There are different ways to organize your literature review. Make use of subheadings to bring order and coherence to your review. For example, having established the importance of your research area and its current state of development, you may devote several subsections on related issues as: theoretical models, measuring instruments, cross-cultural and gender differences, etc. It is also helpful to keep in mind that you are telling a story to an audience. Try to tell it in a stimulating and engaging manner. Do not bore them, because it may lead to rejection of your worthy proposal. (Remember: Professors and scientists are human beings too.) MethodsThe Method section is very important because it tells your Research Committee how you plan to tackle your research problem. It will provide your work plan and describe the activities necessary for the completion of your project. The guiding principle for writing the Method section is that it should contain sufficient information for the reader to determine whether methodology is sound. Some even argue that a good proposal should contain sufficient details for another qualified researcher to implement the study. You need to demonstrate your knowledge of alternative methods and make the case that your approach is the most appropriate and most valid way to address your research question. Please note that your research question may be best answered by qualitative research. However, since most mainstream psychologists are still biased against qualitative research, especially the phenomenological variety, you may need to justify your qualitative method. Furthermore, since there are no well-established and widely accepted canons in qualitative analysis, your method section needs to be more elaborate than what is required for traditional quantitative research. More importantly, the data collection process in qualitative research has a far greater impact on the results as compared to quantitative research. That is another reason for greater care in describing how you will collect and analyze your data. (How to write the Method section for qualitative research is a topic for another paper.) For quantitative studies, the method section typically consists of the following sections: Design -Is it a questionnaire study or a laboratory experiment? What kind of design do you choose? Subjects or participants Who will take part in your study ? What kind of sampling procedure do you use? Instruments What kind of measuring instruments or questionnaires do you use? Why do you choose them? Are they valid and reliable? Procedure How do you plan to carry out your study? What activities are involved? How long does it take? ResultsObviously you do not have results at the proposal stage. However, you need to have some idea about what kind of data you will be collecting, and what statistical procedures will be used in order to answer your research question or test you hypothesis. DiscussionIt is important to convince your reader of the potential impact of your proposed research. You need to communicate a sense of enthusiasm and confidence without exaggerating the merits of your proposal. That is why you also need to mention the limitations and weaknesses of the proposed research, which may be justified by time and financial constraints as well as by the early developmental stage of your research area. Common Mistakes in Proposal Writing Failure to provide the proper context to frame the research question. Failure to delimit the boundary conditions for your research. Failure to cite landmark studies. Failure to accurately present the theoretical and empirical contributions by other researchers. Failure to stay focused on the research question. Failure to develop a coherent and persuasive argument for the proposed research. Too much detail on minor issues, but not enough detail on major issues. Too much rambling -going “all over the map” without a clear sense of direction. (The best proposals move forward with ease and grace like a seamless river.) Too many citation lapses and incorrect references. Too long or too short. Failing to follow the APA style. Slopping writing.","categories":[{"name":"Acedemy writing","slug":"Acedemy-writing","permalink":"http://yoursite.com/categories/Acedemy-writing/"}],"tags":[{"name":"research proposal","slug":"research-proposal","permalink":"http://yoursite.com/tags/research-proposal/"}]},{"title":"Git Basic in Practice (II)","slug":"git","date":"2018-06-03T12:03:53.000Z","updated":"2019-01-18T22:49:36.000Z","comments":true,"path":"2018/06/03/git/","link":"","permalink":"http://yoursite.com/2018/06/03/git/","excerpt":"Working with remotesNote: Remote repositories can be on your local machine.It is entirely possible that you can be working with a “remote” repository that is, in fact, on the same host you are. The word “remote” does not necessarily imply that the repository is somewhere else on the network or Internet, only that it is elsewhere. Working with such a remote repository would still involve all the standard pushing, pulling and fetching operations as with any other remote. Showing your remotesTo see which remote servers you have configured, you can run:1git remote You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote.","text":"Working with remotesNote: Remote repositories can be on your local machine.It is entirely possible that you can be working with a “remote” repository that is, in fact, on the same host you are. The word “remote” does not necessarily imply that the repository is somewhere else on the network or Internet, only that it is elsewhere. Working with such a remote repository would still involve all the standard pushing, pulling and fetching operations as with any other remote. Showing your remotesTo see which remote servers you have configured, you can run:1git remote You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote. Making some changesGit is used to create and store some snapshots attached to your project and to compare these files with the following versions. Here are some important commands to accomplish this task. From changes in files to snapshotTo add some modified files into cache, you can run:1git add &lt;file name&gt; It is common to add all files in a folder. So you can run this command to save your time:1git add . After adding these files, you can use the command git status -s to check the status of snapshots in cache. If you want to get the details, you can run:1git status Also, you can check more detailed information by git diff.Note: git status will tell you the modifications put into cache, and git diff will tell you what these changes are row by row. From snapshot to repositoryBefore you send the git to the remote repository, you must put the changes in snapshots (created by git add) into local repository. So you must run:1git commit -m&apos;this is some description about the changes&apos; After this operation, you can usegit status and you can find that nothing to commit (working directory clean).Since you have finished git commit, you can upload your repository to the remote ones like github. Don’t forget to set your name and password just as the former post says.","categories":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/categories/Tool/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Git Basic in Practice (I)","slug":"operation","date":"2018-05-22T07:43:03.000Z","updated":"2019-01-18T22:49:28.000Z","comments":true,"path":"2018/05/22/operation/","link":"","permalink":"http://yoursite.com/2018/05/22/operation/","excerpt":"Git is a distributed version control system for tracking changes in computer files and coordinating work on those files among multiple people.Git has three main states that your files can reside in: committed, modified, and staged: Committed means that the data is safely stored in your local database. Modified means that you have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot.Figure 1. Working tree, staging area, and Git directory.","text":"Git is a distributed version control system for tracking changes in computer files and coordinating work on those files among multiple people.Git has three main states that your files can reside in: committed, modified, and staged: Committed means that the data is safely stored in your local database. Modified means that you have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot.Figure 1. Working tree, staging area, and Git directory. Installing Git Installing on WindowsThe most official build is available for download on the Git website. Just go to http://git-scm.com/download/win and the download will start automatically. Installing on Linux (Ubuntu/Debain)If you’re on a Debian-based distribution, such as Ubuntu, try apt:1$ apt-get install git Git configure toolingGit comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places: /etc/gitconfig file: Contains values applied to every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically. (Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.) ~/.gitconfigor ~/.config/git/config file: Values specific personally to you, the user. You can make Git read and write to this file specifically by passing the –global option. config file in the Git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository.The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:12$ git config --global user.name \"John Doe\"$ git config --global user.email johndoe@example.com If you want to override this with a different name or email address for specific projects, you can run the command without the --global option when you’re in that project. Git commandsCreating or cloning a Git repositoryIf you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory and type:1$ git init This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton. At this point, nothing in your project is tracked yet. If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit. You can accomplish that with a few git add commands.If you want to get a copy of an existing Git repository — for example, a project you’d like to contribute to — the command you need is git clone like this:1$ git clone https://github.com/libgit2/libgit2 Make ChangesIf you have made changes in your profiles,you can list all new or modified files by typing:1$ git status While the git status output is pretty comprehensive, it’s also quite wordy. Git also has a short status flag so you can see your changes in a more compact way. If you run git status -s or git status --shortIn order to begin tracking a new file, you use the command:1$ git add To see what you’ve changed but not yet staged, type:1$ git diff That command compares what is in your working directory with what is in your staging area. The result tells you the changes you’ve made that you haven’t yet staged. If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged. This command compares your staged changes to your last commit.And you can use git diff --cachedto see what you’ve staged so far. Group ChangesTo List out all local branches in the current repository, you can run:1$ git branch If you want to create a new branch, you can use command git branch [branch-name](command git branch -d [branch-name] for deleting), then use the command git checkout [branch-name]to switch to the specified branch and update the working directory.Certainly,To create a new branch and switch to it at the same time, you can run:1$ git checkout -b [branch-name] Review HistoryTo view the commit history of the current branch, you should use the command:1$ git log Certainly, common options to $ git log helps you to output more freely like sql server. Options are listed in Table.1 Option Description –pretty=oneline Print each commit on a single line –pretty=format: Outputyour own log output format –patch Show the patch introduced with each commit. –stat Show statistics for files modified in each commit.","categories":[{"name":"Tool","slug":"Tool","permalink":"http://yoursite.com/categories/Tool/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]}]}