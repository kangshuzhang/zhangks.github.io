{"meta":{"title":"Blog","subtitle":null,"description":"Zhejiang Unversity, China","author":"Kangshu","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Git Basic in Practice","slug":"operation","date":"2018-05-22T07:43:03.000Z","updated":"2018-05-22T13:30:22.000Z","comments":true,"path":"2018/05/22/operation/","link":"","permalink":"http://yoursite.com/2018/05/22/operation/","excerpt":"","text":"Git is a distributed version control system for tracking changes in computer files and coordinating work on those files among multiple people. Installing Git Installing on WindowsThe most official build is available for download on the Git website. Just go to http://git-scm.com/download/win and the download will start automatically. Installing on Linux (Ubuntu/Debain)If you’re on a Debian-based distribution, such as Ubuntu, try apt:1$ apt-get install git Git setupGit comes with a tool called git config that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places: /etc/gitconfig file: Contains values applied to every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically. (Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.) ~/.gitconfigor ~/.config/git/config file: Values specific personally to you, the user. You can make Git read and write to this file specifically by passing the –global option. config file in the Git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository.The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and it’s immutably baked into the commits you start creating:12$ git config --global user.name \"John Doe\"$ git config --global user.email johndoe@example.com If you want to override this with a different name or email address for specific projects, you can run the command without the --global option when you’re in that project. ##Git commands ###Creating or cloning a Git repositoryIf you have a project directory that is currently not under version control and you want to start controlling it with Git, you first need to go to that project’s directory and type:1$ git init This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton. At this point, nothing in your project is tracked yet. If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit. You can accomplish that with a few git add commands.If you want to get a copy of an existing Git repository — for example, a project you’d like to contribute to — the command you need is git clone like this:1$ git clone https://github.com/libgit2/libgit2","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-13T06:30:08.180Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2018/05/13/hello-world/","link":"","permalink":"http://yoursite.com/2018/05/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}